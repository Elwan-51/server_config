services:
  # Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:v3.2.2
    security_opt:
      - no-new-privileges:true
    restart: always
    profiles: ["core", "all", "traefik"]
    networks:
      t_proxy:
        ipv4_address: 192.168.90.254
#       w_net:
#         ipv4_address: 192.168.100.2
      socket_proxy:
    command:
      # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      # - --entrypoints.ws.address=:9999
      # - --entryPoints.traefik.address=:8080
      - --entryPoints.websecure.http.tls=true
      # - --entryPoints.ws.http.redirections.entryPoint.to=websecure
      # - --entryPoints.ws.http.redirections.entryPoint.scheme=websecure
      # - --entryPoints.ws.http.redirections.entryPoint.permanent=true
      - --api=true
      - --api.dashboard=true
      #- --api.insecure=true
      #- --serversTransport.insecureSkipVerify=true
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Disable for Socket Proxy. Enable otherwise.
      - --providers.docker.endpoint=tcp://socket-proxy:2375 # Enable for Socket Proxy. Disable otherwise.
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t_proxy 
      # - --providers.docker.swarmMode=false
      # - --providers.swarm.endpoint=tcp://127.0.0.1:2377 # Traefik v3 Swarm
      - --entrypoints.websecure.http.tls.options=tls-opts@file
      # Add myresolver as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.websecure.http.tls.certresolver=myresolver
      #- --entrypoints.websecure.http.tls.domains[0].main=$DOMAINNAME_1 # Pulls main cert for second domain
      #- --entrypoints.websecure.http.tls.domains[0].sans=*.$DOMAINNAME_1 # Pulls wildcard cert for second domain
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.myresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.myresolver.acme.storage=/acme.json
      - --certificatesResolvers.myresolver.acme.httpchallenge=true
      - --certificatesResolvers.myresolver.acme.httpchallenge.entryPoint=web
      - --certificatesResolvers.myresolver.acme.email=$EMAIL

    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes :
      - $DOCKERDIR/appdata/traefik/rules/$HOSTNAME:/rules
      - $DOCKERDIR/appdata/traefik/acme/acme.json:/acme.json
      - $DOCKERDIR/appdata/traefik/logs:/logs

    depends_on:
      - socket-proxy
    
    environment:
      - TZ=$TZ
      - DOMAINNAME_1
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
      - "traefik.http.routers.traefik-rtr.rule=Host(`$URI_TRAEFIK.$DOMAINNAME_1`)"
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      - "traefik.http.routers.traefik-rtr.middlewares=chain-auth@file"
      
  auth:
    container_name: auth
    image: thomseddon/traefik-forward-auth:latest
    depends_on:
      - traefik
    profiles: ["core", "all", "auth"]
    networks:
      t_proxy:
    environment:
      DEFAULT_PROVIDER: oidc
      PROVIDERS_OIDC_ISSUER_URL: $TRAEFIK_AUTH_ADD_URI
      PROVIDERS_OIDC_CLIENT_ID: $TRAEFIK_AUTH_AAD_CLIENT_ID
      PROVIDERS_OIDC_CLIENT_SECRET: $TRAEFIK_AUTH_AAD_CLIENT_SECRET
      COOKIE_DOMAIN: $DOMAINNAME_1
      SECRET: $AUTH_MASTER_KEY
      LOG_LEVEL: debug
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.routers.auth.rule=Host(`$URI_AUTH.$DOMAINNAME_1`)"
      - "traefik.http.middlewares.auth-https-redirect.redirectscheme.scheme=websecure"
      - "traefik.http.routers.auth-secure.entrypoints=websecure"
      - "traefik.http.routers.auth-secure.rule=Host(`$URI_AUTH.$DOMAINNAME_1`)"
      - "traefik.http.routers.auth-secure.tls=true"
      - "traefik.http.routers.auth-secure.service=auth"
      - "traefik.http.services.auth.loadbalancer.server.port=4181"
      - "traefik.docker.network=t_proxy"
    restart: unless-stopped